#============================================================================================================
#                    ATIVIDADE FASE 7 - Cap√≠tulo 1 - A consolida√ß√£o de um sistema
#============================================================================================================
#                                   SISTEMA DE CONSULTA FASES
#------------------------------------------------------------------------------------------------------------
"""
# Autor.....: Diego Nunes Veiga
# RM........: 560658
# Turma.....: Gradua√ß√£o - 1TIAOR
# Data......: 17/05/2025
# Assunto...: SISTEMA DE COLSULTA FASES
# Fun√ß√£o....: Realizar a conex√£o com o banco de dados possibilitando cadastrar, consultar, atualizar e excluir
              lotes das sementes colocadas para estoque e gerar um relat√≥rio aprovando ou n√£o o lote.
"""

#============================================================================================================
#                            OBJETIVO DO DESENVOLVIMENTO DO SOFTWARE
#============================================================================================================

#   Aprimorar a dashboard da Fase 4 (realizada preferencialmente em Python), integrando os servi√ßos de cada Fase (1, 2, 3 e 6)
# usando bot√µes ou comandos de terminal, mas de modo que todos os programas estejam em uma √∫nica pasta de projeto no seu
# VS Code ou outra IDE de desenvolvimento que o grupo tem prefer√™ncia. Caso alguma entrega entre as Fases 1 e 6 n√£o tenha
# sido feita, √© a sua chance de tentar faz√™-la e pontuar por isso.

#   Gerar um servi√ßo de alerta aproveitando a infraestrutura AWS criada na Fase 5 para monitorar ou os sensores das Fases 1 ou 3
# ou, ainda, os resultados das an√°lises visuais da vis√£o computacional da Fase 6, isto √©, implemente um servi√ßo de mensageria
# na AWS que integre a dashboard geral da fazenda, sugerindo aos funcion√°rios a√ß√µes corretivas a partir dos dados das Fases 1, 3 ou 6.
# Os funcion√°rios da fazenda precisam receber um e-mail ou um SMS com os devidos alertas e indicando as a√ß√µes. As a√ß√µes devem
# ser definidas pelo grupo.

#============================================================================================================
#                                   BIBLIOTECAS, LISTAS E DICION√ÅRIOS
#============================================================================================================

# Importa√ß√£o das bibliotecas
import os
import io
import oracledb
import pandas as pd
import numpy as np
import streamlit as st
from streamlit import progress
import time
import torch
import tempfile
import pathlib

#Usu√°rio para acessar o banco de dados
user = "RM560658"
password = "010199"
server = 'oracle.fiap.com.br:1521/ORCL'


# Lista de dados da laranja
padraolaranja = [["Adubo Nitrogenado","F√≥sforo","Pot√°ssio","Boro","Zinco","Fungicida"],
             [150, 50, 100, 1.5, 4, 250],
             ["kg","kg","kg","kg","kg","mL"]]

# Vari√°veis do processo
padr√£orelatorio = (98.0, 90.0, 85.0, 10.0, 0.5, 500)

# Submenu de apresenta√ß√£o do titulo e descri√ß√£o de fun√ß√£o da p√°gina
submenu = [["üìä Vis√£o Geral do Projeto","üå± Estimativa do Consumo de Insumos","üóÉÔ∏è Banco de Sementes",
            "üíß IoT e Irriga√ß√£o Inteligente","üõ∞Ô∏è Vis√£o Computacional"],
           ["""
        Bem-vindo ao **Sistema Integrado de Gest√£o para o Agroneg√≥cio - Fase 7**.
    
        Esta aplica√ß√£o consolida todas as entregas das Fases 1 a 6 em um ambiente √∫nico e interativo, permitindo o gerenciamento eficiente da produ√ß√£o agr√≠cola com apoio de tecnologias modernas como **IoT**, **Machine Learning**, **Vis√£o Computacional** e **Cloud Computing**.
    
        ###  Funcionalidades integradas:
        - **Fase 1 ‚Äì Insumos e √Årea de Plantio**  
          C√°lculo de √°rea plantada e estimativa de insumos com base na cultura selecionada.
        - **Fase 2 ‚Äì Banco de Dados**  
          Conex√£o e manipula√ß√£o de dados em um banco relacional com estrutura organizada.
        - **Fase 3 ‚Äì IoT e Automa√ß√£o Inteligente**  
          Simula√ß√£o e controle de sensores (umidade, pH, nutrientes) com l√≥gica de irriga√ß√£o autom√°tica.
        - **Fase 4 ‚Äì Dashboard Interativa com Data Science**  
          Visualiza√ß√£o de dados, gr√°ficos e predi√ß√µes baseadas em aprendizado de m√°quina com interface Streamlit.
        - **Fase 5 ‚Äì Integra√ß√£o com AWS**  
          Seguran√ßa dos dados e sistema de alerta por e-mail ou SMS utilizando AWS SNS.
        - **Fase 6 ‚Äì Vis√£o Computacional**  
          An√°lise de imagens via redes neurais (YOLO ou CNN) para detec√ß√£o de anomalias nas planta√ß√µes.
    
        ---
        ###  Objetivo Final
        Oferecer uma plataforma unificada e escal√°vel que possa ser adaptada para qualquer setor produtivo, com foco em **automa√ß√£o, an√°lise de dados e tomada de decis√£o inteligente** no agroneg√≥cio.
        """,
            "Realize o c√°lculo automatizado dos insumos agr√≠colas necess√°rios para o cultivo de laranjas com base na √°rea plantada. A ferramenta utiliza f√≥rmulas "
            "pr√©-definidas para estimar a quantidade ideal de adubos e defensivos, oferecendo precis√£o no planejamento agr√≠cola.",
            "Gerencie de forma integrada os lotes de sementes armazenadas, com funcionalidades para cadastrar, consultar, atualizar, excluir e gerar relat√≥rios completos. A base de dados √© "
            "conectada a um banco Oracle e permite avalia√ß√£o da qualidade com base em crit√©rios t√©cnicos.",
            "Monitore os principais par√¢metros do solo (umidade, pH, nutrientes) e controle o acionamento da bomba de irriga√ß√£o de forma automatizada via ESP32. O sistema registra os dados coletados "
            "em tempo real, proporcionando uma vis√£o atualizada do estado da planta√ß√£o.",
            "Realize inspe√ß√µes visuais automatizadas na lavoura com apoio de redes neurais YOLOv5. O sistema permite o upload de imagens e detecta automaticamente pragas, doen√ßas ou condi√ß√µes indesejadas"
            " nas laranjas, exibindo alertas em caso de n√£o conformidades."]
           ]


#============================================================================================================
#                                       PROCEDIMENTOS E FUN√á√ïES
#============================================================================================================


# Gerenciamento da sele√ß√£o do menu
def MenuLateral():

    with st.sidebar:
        st.title("MENU LATERAL")
        menu =["Vis√£o Geral","Insumos","Banco de Sementes","Automa√ß√£o IoT","Vis√£o Computacional"]

        if "fase_selecionada" not in st.session_state:
            st.session_state.fase_selecionada = menu[0]

        for i in menu:
            if st.button(i):
                st.session_state.fase_selecionada = i

        return st.session_state.fase_selecionada


# Define estilo dos bot√µes
def EstiloBotao() -> None:
    st.markdown("""
        <style>
        div.stButton > button {
            width: 100%;
            margin-bottom: 10px;
        }
        </style>
    """, unsafe_allow_html=True)


# Realiza conex√£o com o servidor do banco de dados
def ConexaoServidor(user, password, server) -> bool:
    global conn,bd_comando

    try:
        conn = oracledb.connect(user=user, password=password, dsn=server)
        bd_comando = conn.cursor()

    except Exception:
        conexao = False
    else:
        conexao = True

    return conexao


# Apresenta√ß√£o do Submenu
def SubMenu(titulo: dict, descricao: dict) -> None:

    st.title(titulo)
    st.markdown(descricao)
    st.divider()


# Visualiza√ß√£o da Barra de progresso
def BarraProgresso() -> None:

    progresso = progress(0)
    for i in range(100):
        time.sleep(0.01)
        progresso.progress(i+1)


# C√°lculo da √°rea de plantio e insumos consumidos
def ConsumoInsumo(raio:int) -> None:

     # C√°lculo da √°rea total
    area = np.pi * (raio ** 2)
    hectares = area / 10000
    fileiras = round(area / 7)

    # Apresenta√ß√£o dos resultados
    st.markdown(f"Para o cultivo de **{area:.2f} m¬≤**, ou **{hectares:.2f} hectares**, dedicadas para esta cultura precisamos de:")
    st.markdown(f"- **{fileiras} fileiras** para o cultivo ideal")

    for i in range(len(padraolaranja[0])):
        st.markdown(f"- **{padraolaranja[1][i] * hectares:.2f} {padraolaranja[2][i]}** de {padraolaranja[0][i]}")


# Gerenciamento da sele√ß√£o do menu do banco de dados
def MenuSementes():
    menu = ["Inserir lote", "Atualizar lote", "Excluir lote", "Exibir registros", "Excluir registros","Relat√≥rio"]
    cols = st.columns(len(menu))

    if "cmd_selecionado" not in st.session_state:
        st.session_state.cmd_selecionado = menu[0]

    for i in range(len(menu)):
        with cols[i]:
            if st.button(menu[i]):
                st.session_state.cmd_selecionado = menu[i]

    return st.session_state.cmd_selecionado


# Cadastro do novo lote no banco de dados
def NovoLoteSemente():
    try:
        st.write("Preencha os dados para registro no sistema")
        L = st.number_input("Lote: ",min_value=0)
        DC = st.date_input("Data de colheita: ")

        # Separa√ß√£o em duas colunas de dados
        c1, c2 = st.columns(2)
        with c1:
            Pu = st.slider("Pureza(%): ",min_value=0,max_value=100)
            G= st.slider("Taxa de Germina√ß√£o(%): ",min_value=0,max_value=100)
            V = st.slider("Viabilidade(%): ",min_value=0,max_value=100)

        with c2:
            U = st.slider("Teor de Umidade(%): ",min_value=0,max_value=100)
            S = st.slider("Sanidade(%): ",min_value=0,max_value=100)
            Ps = st.number_input("Peso Mil sementes(g): ",min_value=0)

        # Confirma o processo escolhido
        if st.button("ARMAZENAR"):

            bd_comando.execute(f""" INSERT INTO sementes (lote,datacolheita,pureza,germinacao,viabilidade,umidade,sanidade,peso)
                                VALUES ('{L}','{DC}','{Pu}','{G}','{V}','{U}','{S}','{Ps}') """)
            conn.commit()
            BarraProgresso()
            st.success("Os dados foram armazenados...")

    except Exception as e:
        st.error("Erro de transfer√™ncia para o banco de dados")
        st.exception(e)


# Procura lote para realizar a atualiza√ß√£o
def ProcuraLoteSemente() -> None:
    try:
        cmd = st.number_input("Qual lote deseja buscar?:", min_value=0)

        if st.button("CONFIRMAR"):
            bd_comando.execute("SELECT * FROM sementes WHERE lote = {}".format(cmd))
            data = bd_comando.fetchall()

            BarraProgresso()

            if not data:
                st.warning(" Nenhum registro encontrado!")
                st.session_state.lote_encontrado = None
            else:
                st.session_state.lote_encontrado = str(cmd)

    except Exception as e:
        st.error("Erro na consulta.")
        st.exception(e)
        st.session_state.lote_encontrado = None



# Atualiza lote existente
def AtualizaLoteSemente(lote: str) -> None:
    try:

        st.markdown("Preencha os dados para atualizar o **Lote {}** no sistema".format(lote))
        DC = st.date_input("Data de colheita: ")

        # Separa√ß√£o em duas colunas de dados
        c1, c2 = st.columns(2)
        with c1:
            Pu = st.slider("Pureza(%): ", min_value=0, max_value=100)
            G = st.slider("Taxa de Germina√ß√£o(%): ", min_value=0, max_value=100)
            V = st.slider("Viabilidade(%): ", min_value=0, max_value=100)

        with c2:
            U = st.slider("Teor de Umidade(%): ", min_value=0, max_value=100)
            S = st.slider("Sanidade(%): ", min_value=0, max_value=100)
            Ps = st.number_input("Peso Mil sementes(g): ", min_value=0)


        # Confirma o processo escolhido
        if st.button("ATUALIZAR"):

            bd_comando.execute(f"UPDATE sementes SET datacolheita='{DC}', pureza='{Pu}', germinacao='{G}', viabilidade='{V}', umidade='{U}', sanidade='{S}', peso='{Ps}' WHERE lote = '{lote}'")
            conn.commit()
            BarraProgresso()
            st.success("Os dados foram atualizados...")

    except Exception as e:
        st.error("Ocorreu um erro ao atualizar o lote.")
        st.exception(e)


# Comando para excluir lote
def ExcluiDadoSemente(lote: str) -> None:
    try:
        # Confirma o processo escolhido
        if st.button("EXCLUIR LOTE"):

            bd_comando.execute(f"DELETE FROM sementes WHERE id ='{lote}'")
            conn.commit()
            BarraProgresso()
            st.success("O registro foi apagado")

    except Exception as e:
        st.error("Erro de transfer√™ncia de dados")
        st.exception(e)


# Apresenta lista de todos os lotes registrados
def ListaCompletaSemente() -> None:
    lista = []
    bd_comando.execute('SELECT * FROM sementes')
    tabela = bd_comando.fetchall()

    for dt in tabela:
        lista.append(dt)

    # ordena a lista
    lista = sorted(lista)

    # Formata√ß√£o para apresentar todas a tabela sem exce√ß√£o
    pd.set_option('display.max_columns', None)
    pd.set_option('display.expand_frame_repr', False)
    pd.set_option('display.max_rows', None)

    # Gera um DataFrame com os dados da lista utilizando o Pandas
    DadosFormatados = pd.DataFrame.from_records(lista, columns=["ID","Lote","Data de colheita","Pureza(%)","Germina√ß√£o(%)","Viabilidade(%)","Umidade(%)","Sanidade(%)","Pesos(g)"], index='ID')

    if DadosFormatados.empty:
        st.warning("Nenhum registro encontrado!\n")
    else:
        st.dataframe(DadosFormatados)


# Exclui todos os registros existentes no banco de dados
def ExcluiCompletoSemente() -> None:
    st.write("!!!!! O COMANDO IRA EXCLUIR SEU BANCO DE DADOS POR COMPLETO !!!!!")
    st.write("Confirma a exclus√£o?")

    # Comando de exclus√£o de todos os registros existentes
    if st.button("SIM"):
        bd_comando.execute("DELETE FROM sementes")
        conn.commit()
        bd_comando.execute(" ALTER TABLE sementes MODIFY(ID GENERATED AS IDENTITY (START WITH 1)) ")
        conn.commit()

        BarraProgresso()
        st.success("\nTodos os registros foram exclu√≠dos!\n")


# C√°lculo de aprova√ß√£o e reprova√ß√£o do lote
def CalculoAprovaSemente(lista: list,ref: tuple) -> None:
    resultado = []

    # Realiza compara√ß√£o dos valores no banco com os padr√µes
    for i in range(3, len(lista)):
        index = i - 3
        aprova = False

        match i:
            case 3|4|5:
                aprova = lista[i] >= ref[index]

            case 6|7:
                aprova = lista[i] <= ref[index]

            case 8:
                zonamax = ref[index] * 1.05
                zonamin = ref[index] * 0.95
                aprova = zonamin <= lista[i] <= zonamax

        resultado.append("Aprovado" if aprova else "Reprovado")

    return resultado


# Cria o relat√≥rio em TXT
def RelatorioTXTSemente(lote: str, dados: list, result: list, ref: tuple) -> None:

    #Constru√ß√£o do relatorio do lote
    conteudo = (
        f"{'=' * 20} RELAT√ìRIO DE QUALIDADE {'=' * 20}\n"
        "Relat√≥rio de qualidade das sementes obtemos os valores que est√£o aprovado e reprovados conforme padr√£o\n"
        "VALORES PADR√ïES:\n"
        f"\t1. Pureza: acima de {ref[0]} %\n"
        f"\t2. Taxa de Germina√ß√£o: acima de {ref[1]} %\n"
        f"\t3. Viabilidade: acima de {ref[2]} %\n"
        f"\t4. Teor de Umidade: menor ou igual a {ref[3]} %\n"
        f"\t5. Sanidade: menor ou igual a {ref[4]} %\n"
        f"\t6. Peso Mil sementes: padr√£o {ref[5]} (g) com toler√¢ncia de +/-5%\n"
        f"{'-' * 60}\n\n"
        f"ID...............: {dados[0]} (N√∫mero banco de dados)\n"
        f"LOTE.............: {dados[1]}\n"
        f"DATA COLHEITA....: {dados[2]}\n"
        f"\t1. Pureza: {dados[3]} %                  -> {result[0]} conforme padr√£o\n"
        f"\t2. Taxa de Germina√ß√£o: {dados[4]} %      -> {result[1]} conforme padr√£o\n"
        f"\t3. Viabilidade: {dados[5]} %             -> {result[2]} conforme padr√£o\n"
        f"\t4. Teor de Umidade: {dados[6]} %         -> {result[3]} conforme padr√£o\n"
        f"\t5. Sanidade: {dados[7]} %                -> {result[4]} conforme padr√£o\n"
        f"\t6. Peso Mil sementes: {dados[8]} g       -> {result[5]} conforme padr√£o\n"
    )

    st.success("Relat√≥rio gerado com sucesso e pronto para download")

    # Comando para realizar o download do c√≥digo
    buffer = io.BytesIO(conteudo.encode("utf-8"))
    st.download_button(
        label="üì• Baixar relat√≥rio",
        data=buffer,
        file_name=f"RelatorioLote{lote}.txt",
        mime="text/plain"
    )


# Rotina para gera√ß√£o do relat√≥rio de lote
def GeraRelatorioSemente(lote: str,ref: tuple) -> None:
    lista = []
    bd_comando.execute(f"SELECT * FROM sementes WHERE lote = '{lote}'")
    tabela = bd_comando.fetchall()

    for dt in tabela:
        lista.append(dt)

    # Converte os dados obtidos de lista + tupla para lista
    lista = sorted(lista)
    dados = list(lista[0])

    # Chamada do c√°lculo para comparar os itens aprovados
    result = CalculoAprovaSemente(dados,ref)

    #Chamada para realizar o relatorio txt
    RelatorioTXTSemente(lote,dados,result,padr√£orelatorio)


# Apresenta lista de todos os lotes registrados
def ListaCompletaPlantacao() -> None:
    lista = []
    bd_comando.execute('SELECT * FROM plantacao')
    tabela = bd_comando.fetchall()

    for dt in tabela:
        lista.append(dt)

    # ordena a lista
    lista = sorted(lista)

    # Formata√ß√£o para apresentar todas a tabela sem exce√ß√£o
    pd.set_option('display.max_columns', None)
    pd.set_option('display.expand_frame_repr', False)
    pd.set_option('display.max_rows', None)

    # Gera um DataFrame com os dados da lista utilizando o Pandas
    DadosFormatados = pd.DataFrame.from_records(lista, columns=["ID","Data registro","F√≥sforo","Pot√°ssio","Umidade(%)","pH Solo","Bomba √°gua"], index='ID')

    if DadosFormatados.empty:
        st.warning("Nenhum registro encontrado!\n")
    else:
        st.dataframe(DadosFormatados)


# Chama modelo treinado do Yolov5
def ModeloYolo(imagem):

    # Corrige incompatibilidade com PosixPath no Windows (sugerido pelo ChatGPT)
    pathlib.PosixPath = pathlib.WindowsPath

    model = torch.hub.load("ultralytics/yolov5", 'custom', path='best.pt', force_reload=True)
    result = model(imagem)
    return result


# Apresenta resultado da Vis√£o Computacional
def ResultadoVisao(results):

    c1,c2 = st.columns(2)

    with c1:
        st.image(results.render()[0],use_container_width=True)

    with c2:
        st.markdown("### Classes detectadas:")
        df = results.pandas().xyxy[0][['name', 'confidence']]
        df.columns = ['Classe', 'Confian√ßa']
        st.dataframe(df, use_container_width=True)


# Realiza o teste da vis√£o computacional do
def VisaoComputacional() -> None:
    # Interface de upload
    arquivo = st.file_uploader("üì∏ Fa√ßa o upload de uma imagem da lavoura (laranja)",
                                     type=["jpg", "png", "jpeg"])

    # Carregamento da imagem para teste de vis√£o
    if arquivo is not None:
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file.write(arquivo.read())
            temp_image_path = temp_file.name
        st.success("Imagem carregada com sucesso.")


        if st.button("ANALISAR IMAGEM"):
            with st.spinner("Vis√£o Computacional em processamento..."):
                resultado = ModeloYolo(temp_image_path)
                ResultadoVisao(resultado)




#-------------------------------------------------------------------------------------------------------

#============================================================================================================
#                                          PROGRAMA PRINCIPAL
#============================================================================================================

# T√≠tulo da dashboard
st.set_page_config(page_title="Sistema Agroneg√≥cio - Fase 7", layout="wide")

# Aplica estilo aos bot√µes
EstiloBotao()

#Conex√£o com o servidor
conexao = ConexaoServidor(user,password,server)

# Controle do Menu lateral com bot√µes
fase = MenuLateral()

# Escolha do menu conforme comando do usu√°rio
match fase:

    # =================================== Vis√£o Geral =============================================
    case "Vis√£o Geral":
        SubMenu(submenu[0][0],submenu[1][0])

    # ================================ C√°lculo de Insumos ========================================
    case "Insumos":
        # Apresenta√ß√£o da sele√ß√£o da p√°gina
        SubMenu(submenu[0][1], submenu[1][1])

        # Entrada do valores
        cultura = st.selectbox("Escolha a tipo de cultura", ["Laranja"])
        raio = st.number_input("raio da planta√ß√£o (m):", min_value=0)
        st.write("üìè: {} m".format(raio))

        # Confirma o raio para calculo
        if st.button("CALCULAR"):
            ConsumoInsumo(raio)


    # ================================ Banco de dados ========================================
    case "Banco de Sementes":
        # Apresenta√ß√£o da sele√ß√£o da p√°gina
        SubMenu(submenu[0][2], submenu[1][2])

        # Status de conex√£o do banco de dados
        if conexao == True:

            #Sele√ß√£o do comando CRUD para o banco de sementes
            menusem = MenuSementes()
            match menusem:

                # ------------------------------- Inserir lote ------------------------------------
                case "Inserir lote":
                    NovoLoteSemente()

                # ------------------------------- Atualizar lote ----------------------------------
                case "Atualizar lote":
                    ProcuraLoteSemente()
                    if st.session_state.get("lote_encontrado"):
                        AtualizaLoteSemente(st.session_state.lote_encontrado)

                # ------------------------------- Excluir lote ------------------------------------
                case "Excluir lote":
                    ProcuraLoteSemente()
                    if st.session_state.get("lote_encontrado"):
                        ExcluiDadoSemente(st.session_state.lote_encontrado)

                # ----------------------------- Exibir registros ----------------------------------
                case "Exibir registros":
                    ListaCompletaSemente()

                # ----------------------------- Excluir registros ---------------------------------
                case "Excluir registros":
                    ExcluiCompletoSemente()

                # ----------------------------- Relat√≥rio ---------------------------------
                case "Relat√≥rio":
                    ProcuraLoteSemente()
                    if st.session_state.get("lote_encontrado"):
                        GeraRelatorioSemente(st.session_state.lote_encontrado,padr√£orelatorio)

        # Falha na conex√£o do banco de dados
        else:
            st.error("Falha na conex√£o com o banco de dados")


    # ================================ Automa√ß√£o inteligente ========================================
    case "Automa√ß√£o IoT":
        # Apresenta√ß√£o da sele√ß√£o da p√°gina
        SubMenu(submenu[0][3], submenu[1][3])
        ListaCompletaPlantacao()

    # ================================ Inserir lote ========================================
    case "Vis√£o Computacional":
        # Apresenta√ß√£o da sele√ß√£o da p√°gina
        SubMenu(submenu[0][4], submenu[1][4])
        VisaoComputacional()


# Finaliza√ß√£o da p√°gina
st.divider()
st.caption("Desenvolvido por Diego Veiga - Projeto FIAP Fase 7")






